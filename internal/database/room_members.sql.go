// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: room_members.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getRoomMembersByRoomID = `-- name: GetRoomMembersByRoomID :many
SELECT room_id, user_id, is_admin, created_at FROM room_members WHERE room_id = $1
`

func (q *Queries) GetRoomMembersByRoomID(ctx context.Context, roomID uuid.UUID) ([]RoomMember, error) {
	rows, err := q.db.QueryContext(ctx, getRoomMembersByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomMember
	for rows.Next() {
		var i RoomMember
		if err := rows.Scan(
			&i.RoomID,
			&i.UserID,
			&i.IsAdmin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserMemberOfRoom = `-- name: IsUserMemberOfRoom :one
SELECT room_id, user_id, is_admin, created_at FROM room_members WHERE room_id = $1 AND user_id = $2
`

type IsUserMemberOfRoomParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) IsUserMemberOfRoom(ctx context.Context, arg IsUserMemberOfRoomParams) (RoomMember, error) {
	row := q.db.QueryRowContext(ctx, isUserMemberOfRoom, arg.RoomID, arg.UserID)
	var i RoomMember
	err := row.Scan(
		&i.RoomID,
		&i.UserID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const joinRoomByRoomIDAndUserID = `-- name: JoinRoomByRoomIDAndUserID :one
INSERT INTO room_members (room_id, user_id, is_admin) VALUES ($1, $2, $3) RETURNING room_id, user_id, is_admin, created_at
`

type JoinRoomByRoomIDAndUserIDParams struct {
	RoomID  uuid.UUID
	UserID  uuid.UUID
	IsAdmin bool
}

func (q *Queries) JoinRoomByRoomIDAndUserID(ctx context.Context, arg JoinRoomByRoomIDAndUserIDParams) (RoomMember, error) {
	row := q.db.QueryRowContext(ctx, joinRoomByRoomIDAndUserID, arg.RoomID, arg.UserID, arg.IsAdmin)
	var i RoomMember
	err := row.Scan(
		&i.RoomID,
		&i.UserID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const leaveRoomByRoomIDAndUserID = `-- name: LeaveRoomByRoomIDAndUserID :one
DELETE FROM room_members WHERE room_id = $1 AND user_id = $2 RETURNING room_id, user_id, is_admin, created_at
`

type LeaveRoomByRoomIDAndUserIDParams struct {
	RoomID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) LeaveRoomByRoomIDAndUserID(ctx context.Context, arg LeaveRoomByRoomIDAndUserIDParams) (RoomMember, error) {
	row := q.db.QueryRowContext(ctx, leaveRoomByRoomIDAndUserID, arg.RoomID, arg.UserID)
	var i RoomMember
	err := row.Scan(
		&i.RoomID,
		&i.UserID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const roomMemberCountByRoomID = `-- name: RoomMemberCountByRoomID :one
SELECT COUNT(*) FROM room_members WHERE room_id = $1
`

func (q *Queries) RoomMemberCountByRoomID(ctx context.Context, roomID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, roomMemberCountByRoomID, roomID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
